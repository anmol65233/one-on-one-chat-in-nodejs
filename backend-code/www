#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("node-backend-new:server");
var http = require("http");
var https = require("https");
var fs = require("fs");

var Messages = require("../model/messages");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = https.createServer(app);
var io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});
var onlineUsers = {};
var onlineCount = 0;

io.on("connection", function (socket) {
  console.log("a user connected");

  socket.on("user-joined", function (obj) {
    socket.username = obj.username;
    socket.join(obj.username);
    console.log(socket.username);
  });

  socket.on("login", function (obj) {
    socket.name = obj.userid;
    if (!onlineUsers.hasOwnProperty(obj.userid)) {
      onlineUsers[obj.userid] = obj.username;
      onlineCount++;
    }

    io.emit("login", {
      onlineUsers: onlineUsers,
      onlineCount: onlineCount,
      user: obj,
    });
  });

  socket.on("disconnect", function () {
    if (onlineUsers.hasOwnProperty(socket.name)) {
      var obj = { userid: socket.name, username: onlineUsers[socket.name] };

      delete onlineUsers[socket.name];
      onlineCount--;

      io.emit("logout", {
        onlineUsers: onlineUsers,
        onlineCount: onlineCount,
        user: obj,
      });
    }
  });

  socket.on("message", function (obj) {
    io.emit("message", obj);
  });
  socket.on("chat", async function (obj) {
    var messages = new Messages({
      from: obj.from,
      to: obj.to,
      msg: obj.msg,
      type: "one",
    });
    await messages.save();
    io.to(obj.to).emit("chat", { msg: obj.msg });
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log("Express server listening on port " + server.address().port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
